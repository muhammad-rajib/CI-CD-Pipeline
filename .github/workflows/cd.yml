name: CD - Build, Push & Deploy

on:
  workflow_run:
    workflows: ["CI - Test & Build"]
    types:
      - completed

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/fastapi-demo:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/fastapi-demo:${{ github.sha }}

      - name: Deploy on EC2 via SSH
        env:
          DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/fastapi-demo:latest
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} bash -s << 'EOF'
set -e

# Export environment variables inside SSH session
export DOCKER_IMAGE="${DOCKER_IMAGE}"
export DOCKERHUB_USERNAME="${DOCKERHUB_USERNAME}"
export DOCKERHUB_TOKEN="${DOCKERHUB_TOKEN}"

APP_DIR="/home/ubuntu/app"
mkdir -p "$APP_DIR"
cd "$APP_DIR"

# Overwrite deploy.sh dynamically with latest version
cat > deploy.sh << 'DEPLOY_EOF'
#!/usr/bin/env bash
set -e

APP_DIR="/home/ubuntu/app"
cd "$APP_DIR"

: "${DOCKER_IMAGE:?Need to set DOCKER_IMAGE}"

# Login to Docker Hub if private
if [ -n "${DOCKERHUB_USERNAME}" ] && [ -n "${DOCKERHUB_TOKEN}" ]; then
  echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
fi

# Pull latest Docker image & restart container
docker-compose pull
docker-compose up -d --remove-orphans

# Cleanup old images
docker image prune -f

# Reload Nginx if used
sudo systemctl reload nginx || true

echo "âœ… Deployment successful: $DOCKER_IMAGE"
DEPLOY_EOF

# Make deploy.sh executable and run it
chmod +x deploy.sh
./deploy.sh
EOF
